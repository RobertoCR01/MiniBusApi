// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniBusManagement.Data.Repositories;

#nullable disable

namespace MiniBusManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230614085205_PruebaBaseDatos")]
    partial class PruebaBaseDatos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MiniBusManagement.Repositories.Entities.Administration.CompanyDBEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertionDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInsert")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModifies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "359 Avon",
                            City = "San Jose",
                            ContactName = "Roberto Diaz",
                            ContactNumber = "2655666",
                            Email = "Roberto@gmail.com",
                            InsertionDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9274),
                            ModificationDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9334),
                            Name = "Prueba",
                            Phone = "25655656",
                            UserInsert = "Roberto",
                            UserModifies = "RobertoM"
                        },
                        new
                        {
                            Id = 2,
                            Address = "359 chch",
                            City = "San Jose",
                            ContactName = "Roberto Perez",
                            ContactNumber = "250000",
                            Email = "Roberto@hotmail.com",
                            InsertionDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9336),
                            ModificationDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9338),
                            Name = "Prueba",
                            Phone = "25655656",
                            UserInsert = "Roberto",
                            UserModifies = "RobertoM"
                        });
                });

            modelBuilder.Entity("MiniBusManagement.Repositories.Entities.Administration.MiniBusDBEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModifies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Minibuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Toyota",
                            Capacity = 20,
                            CompanyId = 2,
                            InsertionDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9637),
                            ModificationDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9641),
                            Plate = "Pak715",
                            Tipo = "Van",
                            UserInsert = "Roberto",
                            UserModifies = "Roberto",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Mazada",
                            Capacity = 6,
                            CompanyId = 1,
                            InsertionDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9643),
                            ModificationDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9645),
                            Plate = "CL1715",
                            Tipo = "Car",
                            Year = 0
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Isuzu",
                            Capacity = 7,
                            CompanyId = 1,
                            InsertionDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9646),
                            ModificationDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9647),
                            Plate = "BUS715",
                            Tipo = "Bus",
                            Year = 0
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Ford",
                            Capacity = 8,
                            CompanyId = 1,
                            InsertionDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9650),
                            ModificationDate = new DateTime(2023, 6, 14, 20, 52, 5, 668, DateTimeKind.Local).AddTicks(9651),
                            Plate = "625630",
                            Tipo = "Tri",
                            UserInsert = "Roberto",
                            UserModifies = "RobertoM",
                            Year = 0
                        });
                });

            modelBuilder.Entity("MiniBusManagement.Repositories.Entities.Administration.RolDBEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModifies")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MiniBusManagement.Repositories.Entities.Administration.UserDBEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModifies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RolDBEntityUserDBEntity", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RolDBEntityUserDBEntity");
                });

            modelBuilder.Entity("MiniBusManagement.Repositories.Entities.Administration.MiniBusDBEntity", b =>
                {
                    b.HasOne("MiniBusManagement.Repositories.Entities.Administration.CompanyDBEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MiniBusManagement.Repositories.Entities.Administration.RolDBEntity", b =>
                {
                    b.HasOne("MiniBusManagement.Repositories.Entities.Administration.CompanyDBEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MiniBusManagement.Repositories.Entities.Administration.UserDBEntity", b =>
                {
                    b.HasOne("MiniBusManagement.Repositories.Entities.Administration.CompanyDBEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RolDBEntityUserDBEntity", b =>
                {
                    b.HasOne("MiniBusManagement.Repositories.Entities.Administration.RolDBEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniBusManagement.Repositories.Entities.Administration.UserDBEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
